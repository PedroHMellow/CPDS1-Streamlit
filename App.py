from pathlib import Path
import streamlit as st  
from PIL import Image
import plotly.express as px
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import norm, poisson


# Configura√ß√µes do caminho:
current_dir = Path(__file__).parent if "__file__" in locals() else Path.cwd()
css_file = current_dir / "Styles" / "main.css"
resume_file = current_dir / "Assets" / "Curr√≠culo_tempor√°rio.pdf"
profile_pic = current_dir / "Assets" / "Profile picture.png"

# Vari√°veis
TPagina = "CPDS | PedroHMello"
Nome = "PedroHMello"
Descricao = """
Ol√°, meu nome √© Pedro Henrique Mello, sou estudante de Engenharia de Software na FIAP, com previs√£o de conclus√£o em Julho de 2027. Tenho paix√£o por tecnologia, desenvolvimento de software e resolu√ß√£o de problemas por meio da programa√ß√£o. Ao longo da minha trajet√≥ria acad√™mica, participei de desafios como o Challenge Hospital HC e o Challenge Rede √Çncora, onde pude aplicar meus conhecimentos na pr√°tica e desenvolver habilidades essenciais para o mercado de trabalho.

Atualmente, estou buscando uma oportunidade de est√°gio para aprimorar minhas habilidades e ganhar experi√™ncia profissional. Tenho conhecimentos em Python, HTML, CSS, React e Tailwind, al√©m de familiaridade com ferramentas de design como Photoshop. Sou um profissional curioso, dedicado e sempre disposto a aprender novas tecnologias e metodologias.

Acredito que minha capacidade de aprendizado r√°pido, minha paix√£o pelo desenvolvimento de software e minhas soft skills em storytelling podem agregar valor a qualquer equipe. Estou ansioso para fazer parte de um ambiente inovador onde possa crescer e contribuir ativamente para projetos desafiadores.
"""
Email = "israelalvesmello2003@gmail.com" 
RedesS = {
    "üîóLinkedin": "https://www.linkedin.com/in/pedro-henrique-mello-80672a252/",
    "üîóGithub": "https://github.com/PedroHMellow"
}

# Nav
st.set_page_config(page_title=TPagina)
menu = st.sidebar.radio("Navega√ß√£o", ["Home", "Skills", "An√°lise de Dados"])

# Home
if menu == "Home":
    with open(css_file) as f:
        st.markdown("<style>{}</style>".format(f.read()), unsafe_allow_html=True)
        with open(resume_file, "rb") as pdf_file:
            PDFbyte = pdf_file.read()
        profile_pic = Image.open(profile_pic)

        col1, col2 = st.columns(2, gap="small")
        with col1:
            st.image(profile_pic, width=230)
        
        with col2:
            st.title(Nome)
            st.download_button(
                label="üìÑ Baixar curr√≠culo",
                data=PDFbyte,
                file_name=resume_file.name,
                mime="application/octet-stream",
            )
            st.write("üì´", Email)
            cols = st.columns(len(RedesS))
            for index, (platform, link) in enumerate(RedesS.items()):
                cols[index].write(f"[{platform}]({link})")
        
        st.write("###")
        st.subheader("Introdu√ß√£o Pessoal e Objetivo Profissional:")
        st.write(Descricao)
        st.write("###")
        st.subheader("Forma√ß√£o:")
        st.write("""
        - üéì FIAP | Engenharia de Software (Previs√£o de conclus√£o: Julho de 2027)
        """)
        st.subheader("Experi√™ncia:")
        st.write("""
        - üë®üèª‚Äçüíª Programador | Front End para Hospital HC
            -   Revitaliza√ß√£o do site do Hospital, com foco na experi√™ncia do usu√°rio(UX).
            -   Garantia de acessibilidade para p√∫blicos de diferentes faixas et√°rias.
            -   Prioriza√ß√£o da empatia no design, considerando o p√∫blico infantil.
            -   Utiliza√ß√£o de HTML, Tailwind e JavaScript para uma interface intuitiva e responsiva.
        """)
        st.write("---")
        st.write("""
        - üë®üèª‚Äçüíª Programador para Rede Ancora
            -   Projeto em andamento com foco na fideliza√ß√£o de clientes da Rede √Çncora.
            -   Desenvolvimento de um website para compra de pe√ßas com ambiente 3D interativo.
            -   O ambiente 3D auxilia na modelagem, cria√ß√£o e manuten√ß√£o de carros.
            -   Tecnologias utilizadas: Maya, Java, HTML, CSS e Python.
        """)

# Skills
elif menu == "Skills":
    with open(css_file) as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)
        st.subheader("Skills")
        st.write("""
        - ‚≠ê Linguagens de Programa√ß√£o: Python, HTML, CSS, React e Tailwind 
        - ‚≠ê Soft Skills: Storytelling
        - ‚≠ê Extras: Photoshop 
        """)

        categories = ["Linguagens de Programa√ß√£o", "Soft Skills", "Extra"]
        valores = [8, 7, 6]

        df = pd.DataFrame(dict(
            r=valores,
            theta=categories
        ))

        fig = px.line_polar(df, r='r', theta='theta', line_close=True)
        fig.update_traces(fill='toself', line=dict(color='red'))
        fig.update_layout(
            polar=dict(radialaxis=dict(visible=True, range=[0, 10])),
            showlegend=False
        )
        st.plotly_chart(fig)

# An√°lise de Dados
elif menu == "An√°lise de Dados":
    with open(css_file) as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

        @st.cache_data
        def load_data():
            file_path = "economic-survey-of-manufacturing-december-2024-quarter.xlsx"
            try:
                xls = pd.ExcelFile(file_path)
                df = pd.read_excel(xls, sheet_name="Table 1", skiprows=9)
                df = df.rename(columns={
                    "SFZ1CA": "Sales (Unadjusted)",
                    "SFZ1CS": "Sales (Seasonally Adjusted)",
                    "SFZ1CT": "Sales (Trend)",
                    "SFZ4CA": "Raw Materials",
                    "SFZ5CA": "Closing Stocks",
                    "SFZ1KA": "Sales Volume",
                    "SFZ1KS": "Sales Volume (Seasonally Adjusted)",
                    "SFZ1KT": "Sales Volume (Trend)",
                    "SFZ5KA": "Closing Stocks Volume"
                })
                df = df.dropna(how='all')  # Remover linhas completamente vazias
                df = df.dropna(axis=1, how='all')  # Remover colunas completamente vazias
                return df
            except Exception as e:
                st.error(f"Erro ao carregar os dados: {e}")
                return pd.DataFrame()

        df = load_data()

        st.header("An√°lise de Dados - Economic Survey of Manufacturing")
        st.write("Os dados utilizados nesta an√°lise foram extra√≠dos do Economic Survey of Manufacturing - December 2024 Quarter, um relat√≥rio econ√¥mico sobre a ind√∫stria manufatureira. O conjunto de dados cont√©m informa√ß√µes sobre m√©tricas financeiras e operacionais, incluindo dados de vendas, estoques entre outros.")

        # st.header("2)Medidas centrais")


        if df.empty:
            st.warning("Os dados n√£o foram carregados corretamente. Verifique o arquivo e tente novamente.")
        else:
            # Medidas Centrais
            st.header("Medidas Centrais")
            summary_stats = df.describe().T
            st.write(summary_stats[['mean', '50%', 'std', 'min', 'max']].rename(columns={'50%': 'median'}))

            # Analise 
            st.write("Com base nos resultados podemos conluir que:")
            st.write("""
            - A m√©dia das vendas ajustadas sazonalmente foi um bom indicador do comportamento geral dos dados.
            -  A mediana mostrou que a distribui√ß√£o dos dados n√£o era extremamente assim√©trica, j√° que ficou pr√≥xima da m√©dia.
            - A moda n√£o foi relevante em algumas vari√°veis porque os dados eram cont√≠nuos e n√£o tinham valores repetidos suficientes para determinar um valor predominante.
            """)
        

            st.write("---")

            # An√°lise da distribui√ß√£o
            st.header("Distribui√ß√£o dos Dados")
            selected_variable = st.selectbox("Escolha uma vari√°vel para visualizar:", df.columns)

            fig, ax = plt.subplots(figsize=(8, 5))  
            sns.histplot(df[selected_variable].dropna(), bins=15, kde=True, ax=ax)
            ax.set_title(f"Distribui√ß√£o de {selected_variable}")
            ax.set_xlabel(selected_variable)
            ax.set_ylabel("Frequ√™ncia")
            plt.xticks(rotation=45)  
            st.pyplot(fig)

            # Analise 
            st.write("Conclus√£o: Os dados principais analisados, especialmente as vendas ajustadas, seguem um comportamento relativamente previs√≠vel, com pouca assimetria, o que permite aplicar modelos estat√≠sticos como a distribui√ß√£o normal para previs√µes futuras. Entretanto, algumas vari√°veis podem precisar de transforma√ß√µes ou modelos mais espec√≠ficos devido √† dispers√£o elevada.")

            st.write("---")

        
        # st.header("3)Aplica√ß√£o")

        # Distribui√ß√£o Normal
        st.subheader("Distribui√ß√£o Normal")
        
        sales_data = df["Sales (Seasonally Adjusted)"].dropna()
        mu, sigma = sales_data.mean(), sales_data.std()
        x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)
        y = norm.pdf(x, mu, sigma)
        
        fig, ax = plt.subplots(figsize=(8, 5))
        sns.histplot(sales_data, bins=15, kde=True, stat="density", ax=ax)
        ax.plot(x, y, 'r-', label="Distribui√ß√£o Normal")
        ax.set_title("Distribui√ß√£o Normal das Vendas Ajustadas Sazonalmente")
        ax.set_xlabel("Vendas")
        ax.set_ylabel("Densidade")
        ax.legend()
        st.pyplot(fig)

        # Analise
        st.write("Com base nos resultados podemos conluir que:")
        st.write("""
        - M√©dia e Simetria: Os valores das vendas ajustadas sazonalmente ficaram concentrados ao redor da m√©dia, o que indica um comportamento previs√≠vel e est√°vel.
        -  Compara√ß√£o com a Curva Normal: Quando sobrepomos a curva da distribui√ß√£o normal ao histograma dos dados, observamos que ela se ajusta bem ao formato dos dados, refor√ßando a hip√≥tese de normalidade.
        - Desvio Padr√£o: O desvio padr√£o mostrou que a maioria dos valores est√° dentro de um intervalo previs√≠vel ao redor da m√©dia, sem grandes varia√ß√µes extremas.
        """)

        st.write("---")


        # Distribui√ß√£o de Poisson
        st.subheader("Distribui√ß√£o de Poisson")
        st.write("A distribui√ß√£o de Poisson √© aplicada para modelar a ocorr√™ncia de eventos em um intervalo de tempo fixo.")
        
        lambda_poisson = sales_data.mean() / 1000  # Normalizando para valores razo√°veis
        x_poisson = np.arange(0, max(sales_data)//1000)
        y_poisson = poisson.pmf(x_poisson, lambda_poisson)
        
        fig, ax = plt.subplots(figsize=(8, 5))
        ax.bar(x_poisson, y_poisson, color='purple', alpha=0.6, label="Distribui√ß√£o de Poisson")
        ax.set_title("Distribui√ß√£o de Poisson - Modelagem de Eventos")
        ax.set_xlabel("Ocorr√™ncias por unidade")
        ax.set_ylabel("Probabilidade")
        ax.legend()
        st.pyplot(fig)

        # Analise
        st.write("Os dados indicam que a maior parte dos per√≠odos apresenta vendas dentro de um certo padr√£o, mas h√° alguns momentos com ocorr√™ncias acima do esperado. Isso pode ser √∫til para prever sazonalidades e preparar estrat√©gias para per√≠odos de alta demanda.")
